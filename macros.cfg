#####################################################################
#   Macros
#####################################################################
[bed_mesh]
#STATUS_LEVELING
speed: 200
horizontal_move_z: 2
##--------------------------------------------------------------------
##	Uncomment for 350mm build
mesh_min: 40, 40    #40, 40
mesh_max: 310,310

#mesh_min: 30, 16    #40, 40
#mesh_max: 330,326
##--------------------------------------------------------------------
fade_start: 0.6
fade_end: 10 # 10.0
probe_count: 7,7  #5,5
algorithm: bicubic
#relative_reference_index: 24  #13 puvodne 24
#STATUS_READY


# [gcode_macro QGL]
# gcode:
#     G28
#     #STATUS_LEVELING
#     QUAD_GANTRY_LEVEL
#     G28
#     ##  Uncomment for for your size printer:
#     #--------------------------------------------------------------------
#     ##  Uncomment for 250mm build
#     #G0 X125 Y125 Z30 F3600
    
#     ##  Uncomment for 300 build
#     #G0 X150 Y150 Z30 F3600
    
#     ##  Uncomment for 350mm build
#     #G0 X175 Y175 Z30 F3600
#     G90
#     G0 X175 Y175 Z30 F10800
#     #STATUS_READY
#     #--------------------------------------------------------------------

[gcode_shell_command plot_graph]
command: bash /home/pi/printer_data/config/scripts/plot_graphs.sh
timeout: 500.0
verbose: True

[gcode_macro EXCITATE_AXIS_AT_FREQ]
description: Maintain a specified input shaper excitating frequency for some time to diagnose vibrations
gcode:
    {% set FREQUENCY = params.FREQUENCY|default(25)|int %}
    {% set TIME = params.TIME|default(10)|int %}
    {% set AXIS = params.AXIS|default("x")|string|lower %}

    TEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}
    M400


[homing_override]
axes: xyz
gcode:
  {% set tilted = printer.quad_gantry_level.applied|default("false")|lower %}

  {% if tilted == "false" %}
      SET_KINEMATIC_POSITION Z=0
      G91
      G1 Z5 F1200
  {% endif %}

  {% set home_all = 'X' not in params and 'Y' not in params and 'XY' not in params and 'Z' not in params %}

  {% if home_all or 'X' in params or 'XY' in params %}
    _HOME_X
  {% endif %}

  {% if home_all or 'Y' in params or 'XY' in params %}
    _HOME_Y
  {% endif %}

  {% if home_all or 'Z' in params %}
    G90
    G1 X175 Y175 F6600 ## toto je pro 350 verzi, přepište si zde vaši velikost, jinak to nebude dělat home uprostřed
    G28 Z
    G1 Z10
  {% endif %}
   
   
[gcode_macro PRINT_START]
gcode:       
    # Parameters
    {% set BED = params.BED|int %} ; Get bed temp from gcode
    {% set HOTEND = params.HOTEND|int %} ; Get nozzle temp from gcode
    {% set CHAMBER = params.CHAMBER|default(0)|int %} ; Get chamber temp from gcode
    # Get bounding box of the first layer
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
    # enable lights
    LIGHTS_ON
    SET_FILAMENT_SENSOR SENSOR=runout_sensor ENABLE=0
    #SET_FILAMENT_SENSOR SENSOR=runout_sensor ENABLE=0
    # <insert routines>
    ########## enable IS ################
    #ENABLE_INPUT_SHAPER EXTRUDER=extruder EXACT=1
    STATUS_HEATING
    M190 S{BED}                                                              ; wait for bed temp
    M109 S150 ; preheat nozzle but not high enough to melt everything and ooze
    STATUS_HOMING
    G28 # Home if needed
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CHAMBER}  ; wait for chamber temp
    G90 # Use absolute coordinates
  # SET_GCODE_OFFSET Z=0.0 # Reset the G-Code Z offset from previous value
    STATUS_CLEANING
    CLEAN_NOZZLE # clean nozzle before home to ensure clean home
    # G91
    # G1 Y-20 F6000
    # G90
    #G28 Z # Home Z only after clean nozzle
    BED_MESH_CLEAR # Clear the current bed mesh
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL # level the gantry, requires probe
    #home
    STATUS_HOMING
    G28 Z # Home after QGL
    #M109 S170 ; preheat nozzle but not high enough to melt everything and ooze
    #moved nozzle temperatre from here to before the g92  
             
    #G28 # Rehome so absolute coordinates do ok  
    #TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={CHAMBER}   ; wait for chamber temp
    # <nozzle clean>
    #G28                                                                    ; final z homing with hot nozzlE
    #G32                                                                     ; home all axes
    #G1 Z20 F3000                                                            ; move nozzle away from bed
    #BED_MESH_PROFILE LOAD=Probe1
    #might add retraction here to ensure nozzle is clean too.  G1 E-5.0 F100 
 
    STATUS_MESHING
    #ADAPTIVE_BED_MESH
    #DOCK_PROBE_UNLOCK
    BED_MESH_CALIBRATE

    #STATUS_CLEANING
    #M117 After MeshCalibrate
    #STATUS_CLEANING
    #CLEAN_NOZZLE # clean again to make sure it is clean before z calibrate
    #M117 Clean B4 CalibrateZ
    #STATUS_CALIBRATING_Z
    #ATTACH_PROBE_LOCK
    #COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}
    #CALIBRATE_Z  # calibrate z, requires probe, does not dock when finished REQUIRES CLICKY PROBE
    #M117 After CalibrateZ
    #BED_MESH_CALIBRATE METHOD=AUTOMATIC # calibrate the bed mesh, save as default
    #BED_MESH_PROFILE LOAD=default # loads default bed mesh
    #G1 X125 Y350 Z5 F10000         ; Move to purge bucket location 
    STATUS_HEATING
    #STATUS_PRINTING #status_printing
    G92 E0 ; set extruder to 0


   
    #M117 Priming
    G90                 ; Absolute coordinates.
    M83                 ; Relative extruder mode.
    G92 E0
    ; Move to start of line.
    G1 Z10 F900
    G1 Y3 X3 F18000
    G1 Z0.7 F900
    M109 S{HOTEND}          ; wait for hotend temp
    STATUS_PRINTING #status_printing
    #ADAPTIVE_PURGE
    G1 Z0.3 F900
    ; Print the line.
    G91                ; Relative coordinates.
    G1 X150 E25 F1000  ; Extrude filament 25mm (how much it retracted in PRINT_END).
    G1 Y-2 F500
    G1 X-60 E9 F1000    ; Print second part of the line.
    G1 E-0.1 F3000      ; Retract to avoid stringing.
    G1 X0.5 E0 F1000    ; Wipe back to break string.
    G1 X-5.5 E0 F1000   ; Wipe forward to break string.
    SET_FILAMENT_SENSOR SENSOR=runout_sensor ENABLE=1


    #    M109 S{HOTEND}          ; wait for hotend temp     
    #G1 E0.8 F200           ; Extrude a small amount of filament to get nozzle ready to print
    #G1 E-0.8 F100         ; Small Retraction
    #STATUS_CLEANING    
    #CLEAN_NOZZLE
    #G0 Z10 F3600                  ; Move away from nozzle brush
    #G0 X120 Y120 Z0.8 F10000
    #G92 E0 ; set extruder to 0
    
    M117 Printing...
    M117
    #SET_FILAMENT_SENSOR SENSOR=runout_sensor ENABLE=1
    #PURGE_LINE                                     
#This would now be run like `PRINT_START BED=110 HOTEND=240 CHAMBER=50`.
#Chamber defaults to 0 if not specified - see parameters section.

    

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M221 S100 ; set speed back to if speedup print 100%
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 100, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-20.0 F3000                ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2}
    #G91
    #G1 Z50 F900
    #G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    ##STATUS_CLEANING
    ##G1 X75 Y350 Z10 F3600        ; Move to purge bucket location 
    #CLEAN_NOZZLE
    
    #BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    # disable lights
    LIGHTS_OFF
    STATUS_READY
    CLEAR_ACTIVE_SPOOL #for spoolman https://github.com/Donkie/Spoolman



[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-100 F1000  # vysune filamen
    PAUSE
    STATUS_CLEANING
    #prejede k purge bucket
    #G90
    #G1 X75 F10000
    #G1 Y350
    #G1 Z0
    #G1 E100 F1000
    #G1 E-0.8 F2700
    CLEAN_NOZZLE_PURGE
    STATUS_PRINTING
    RESTORE_GCODE_STATE NAME=M600_state


#[gcode_macro CALIBRATE_Z]
#rename_existing: BASE_CALIBRATE_Z
#gcode:
    #M117 Z-Calibration..
   # STATUS_CALIBRATING_Z
   # SET_GCODE_OFFSET Z=0
   # BASE_CALIBRATE_Z
   # M117
    #STATUS_READY


[gcode_shell_command backup_cfg]
 command: /home/pi/printer_data/config/autocommit.sh
 timeout: 30
 verbose: True

[gcode_macro BACKUP_CFG]
 description: Backs up config directory GitHub
 gcode:
     RUN_SHELL_COMMAND CMD=backup_cfg


[gcode_macro KALIBRACE_Z]
#rename_existing: BASE_CALIBRATE_Z
gcode:
    M117 Z-Calibration..
    STATUS_CALIBRATING_Z
    SET_GCODE_OFFSET Z=0
    BASE_CALIBRATE_Z
    M117
    STATUS_READY

[gcode_macro Presnost_sondy]
gcode:
    STATUS_CALIBRATING_Z
    M117 Probe accuracy
    PROBE_ACCURACY
    M117
    STATUS_READY



[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED


[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    ##	Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##	Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##	Uncomment for 300 build
    #G0 X150 Y150 Z30 F3600
    
    ##	Uncomment for 350mm build
    G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}


# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro ZUP]
#   My Addition G-Code
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1   ; move closer during print to adjust squish
    
[gcode_macro ZDOWN]
#   My Addition G-Code
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1

[gcode_macro UNLOAD_FILAMENT]
gcode:
    M83                    # set extruder to relative extrusion
    G90                    # set toolhead to absolute position
    #G1 Z80 F100000         
    G1 X250 Y50 F25000    # move up and to front/center to straighten filament path
    G1 E3  F300            # extrude slowly to soften tip of filament
    G1 E-30 F100000        # quickly yank filament back clear of hotend
    G1 E-80 F1800          # ensure filament is clear of extruder gears
    M82                    # set extruder to absolute extrusion

[gcode_macro LOAD_FILAMENT]
gcode:
    M83                    # set extruder to relative extrusion
    G90                    # set toolhead to absolute position
    STATUS_PRINTING
    #G1 Z80 F100000
    G1 X250 Y50 F25000    # move up and to front/center to straighten filament path
    G1 E35 F300            # extrude filament through into hotend
    G1 E15 F240            # slowly extrude through hotend to partially purge previous filament
    G1 E-15.0 F100000      # retract filament
    M82                    # set extruder to absolute extrusion

[gcode_macro PURGE_LINE]
gcode:

  G0 X340 Y50 F3000              ; Go to side
  G0 Z0.25                      ;
  G1 E15 F200                    ; purge blob
  G92 E0                        ; zero the extruded length
  G1 Y330 E7.5 F800              ; Extrude purge line
#  G1 Y300 E-.1 F800              ; Retract while wiping on purged line
  G1 Z4 

[gcode_macro SWIPENOZZLE]
gcode:
	;G28
	SAVE_GCODE_STATE NAME=SWIPENOZZLE
	G90																; absolute positioning
	G0 X85 Y350 Z15 F1500												; move nozzle into positioning
	G0 Z8 F1500														; lower nozzle into brush
	G0 X120 F5000													; swipe nozzle once to right
	G0 X175 Z25 F1500	
#Lighting Control
[gcode_macro lights_on]
gcode:
    SET_PIN PIN=caselight VALUE=1.0

[gcode_macro lights_off]
gcode:
    SET_PIN PIN=caselight VALUE=0

[gcode_macro lights_40]
gcode:
    SET_PIN PIN=caselight VALUE=0.4


[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}