#####################################################################
#   Macros
#####################################################################
[bed_mesh]
zero_reference_position: 175, 175    #carto
#STATUS_LEVELING
speed: 200
horizontal_move_z: 2
##--------------------------------------------------------------------
##	Uncomment for 350mm build
mesh_min: 40, 40    #40, 40
mesh_max: 310,288   #310, 310

#mesh_min: 30, 16    #40, 40
#mesh_max: 330,326
##--------------------------------------------------------------------
fade_start: 0.6
fade_end: 10 # 10.0
probe_count: 11,11  #5,5
algorithm: bicubic




# cartographer - klipperscreen

#[gcode_macro PROBE_CALIBRATE]
#gcode:
#    CARTOGRAPHER_CALIBRATE


# [safe_z_home]
# home_xy_position: 175, 175
# # Example home_xy_position: 175,175 - This would be for a 350 * 350mm bed. 
# z_hop: 10

[homing_override]
axes: xyz
gcode:
  {% set tilted = printer.quad_gantry_level.applied|default("false")|lower %}

  {% if tilted == "false" %}
      SET_KINEMATIC_POSITION Z=0
      G91
      G1 Z5 F1200
  {% endif %}

  {% set home_all = 'X' not in params and 'Y' not in params and 'XY' not in params and 'Z' not in params %}

  {% if home_all or 'X' in params or 'XY' in params %}
    _HOME_X
  {% endif %}

  {% if home_all or 'Y' in params or 'XY' in params %}
    _HOME_Y
  {% endif %}

  {% if home_all or 'Z' in params %}
    G90
    G1 X175 Y175 F6600 ## toto je pro 350 verzi, přepište si zde vaši velikost, jinak to nebude dělat home uprostřed
    G28 Z
    G1 Z10
  {% endif %}
   
   
[gcode_macro PRINT_START]
gcode:       
    # Parameters
    {% set BED = params.BED|int %} ; Get bed temp from gcode
    {% set HOTEND = params.HOTEND|int %} ; Get nozzle temp from gcode
    {% set CHAMBER = params.CHAMBER|default(0)|int %} ; Get chamber temp from gcode
    # Get bounding box of the first layer
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
    # enable lights
    LIGHTS_ON
    STATUS_HEATING
    M190 S{BED}                                                              ; wait for bed temp
    M109 S150 ; preheat nozzle but not high enough to melt everything and ooze
    STATUS_HOMING
    G28 # Home if needed
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CHAMBER}  ; wait for chamber temp
    #G90 # Use absolute coordinates
  # SET_GCODE_OFFSET Z=0.0 # Reset the G-Code Z offset from previous value

    # G91
    # G1 Y-20 F6000
    # G90
    #G28 Z # Home Z only after clean nozzle
    BED_MESH_CLEAR # Clear the current bed mesh
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CHAMBER}   # Waits for chamber to reach desired temp
    STATUS_LEVELING
    #GQL
    QUAD_GANTRY_LEVEL # level the gantry, requires probe
    #home Z
    STATUS_CLEANING
    CLEAN_NOZZLE # clean nozzle before home to ensure clean home
    G28 Z
    STATUS_MESHING
    BED_MESH_CALIBRATE
    CARTOGRAPHER_TOUCH                ; Perform touch probeCARTOGRAPHER_TOUCH                ; Perform touch probe
    STATUS_HEATING

    
    #STATUS_PRINTING #status_printing
    G92 E0 ; set extruder to 0


   
    #M117 Priming
    G90                 ; Absolute coordinates.
    M83                 ; Relative extruder mode.
    G92 E0
    ; Move to start of line.
    G1 Z10 F900
    G1 Y3 X3 F18000
    G1 Z0.2 F900  #0.7
    M109 S{HOTEND}          ; wait for hotend temp
    STATUS_PRINTING #status_printing
    #ADAPTIVE_PURGE
    G1 Z0.3 F900
    ; Print the line.
    G91                ; Relative coordinates.
    G1 X150 E25 F1000  ; Extrude filament 25mm (how much it retracted in PRINT_END).
    G1 Y-2 F500
    G1 X-60 E9 F1000    ; Print second part of the line.
    G1 E-0.1 F3000      ; Retract to avoid stringing.
    G1 X0.5 E0 F1000    ; Wipe back to break string.
    G1 X-5.5 E0 F1000   ; Wipe forward to break string.

    M117 Printing...
    M117

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M221 S100 ; set speed back to if speedup print 100%
    M220 S100
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    # {% set z_safe = [th.position.z + 10, th.axis_maximum.z]|min %} #zmeneno z +100 na +10

    G1 E-15.0 F3000                ; retract filament
    
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    {% if printer.toolhead.position.z < (max_z - 100) %}
        {% set z_safe = 100.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
  
    

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2}
    #G91
    #G1 Z50 F900
    #G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    ##STATUS_CLEANING
    ##G1 X75 Y350 Z10 F3600        ; Move to purge bucket location 
    #CLEAN_NOZZLE
    
    #BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    # disable lights
    # LIGHTS_OFF
    STATUS_READY
    CLEAR_ACTIVE_SPOOL #for spoolman https://github.com/Donkie/Spoolman




[gcode_macro M600]
gcode:
    {% set X = params.X|default(350)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state



[gcode_macro BACKUP_CFG]
description: Backs up config directory GitHub
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg


[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED


[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    ##	Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##	Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##	Uncomment for 300 build
    #G0 X150 Y150 Z30 F3600
    
    ##	Uncomment for 350mm build
    G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}


[gcode_macro _CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            G28 ; home if not already homed
        {% endif %}
        QUAD_GANTRY_LEVEL
        G28 Z
    {% endif %}
    

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER


[gcode_macro UNLOAD_FILAMENT]
gcode:
    M83                    # set extruder to relative extrusion
    G90                    # set toolhead to absolute position
    #G1 Z80 F100000         
    G1 X350 Y0 F25000    # move up and to front/center to straighten filament path
    G1 E3  F300            # extrude slowly to soften tip of filament
    G1 E-30 F100000        # quickly yank filament back clear of hotend
    G1 E-80 F1800          # ensure filament is clear of extruder gears
    M82                    # set extruder to absolute extrusion

[gcode_macro LOAD_FILAMENT]
gcode:
    M83                    # set extruder to relative extrusion
    G90                    # set toolhead to absolute position
    STATUS_PRINTING
    #G1 Z80 F100000
    G1 X350 Y0 F25000    # move up and to front/center to straighten filament path
    G1 E90 F300            # extrude filament through into hotend #35 default
    G1 E15 F240            # slowly extrude through hotend to partially purge previous filament
    G1 E-15.0 F600         # retract filament
    M82                    # set extruder to absolute extrusion

[gcode_macro PURGE_LINE]
gcode:

  G0 X340 Y50 F3000              ; Go to side
  G0 Z0.25                      ;
  G1 E15 F200                    ; purge blob
  G92 E0                        ; zero the extruded length
  G1 Y330 E7.5 F800              ; Extrude purge line
#  G1 Y300 E-.1 F800              ; Retract while wiping on purged line
  G1 Z4 

[gcode_macro SWIPENOZZLE]
gcode:
	;G28
	SAVE_GCODE_STATE NAME=SWIPENOZZLE
	G90																; absolute positioning
	G0 X85 Y350 Z15 F1500												; move nozzle into positioning
	G0 Z8 F1500														; lower nozzle into brush
	G0 X120 F5000													; swipe nozzle once to right
	G0 X175 Z25 F1500	

    
#Lighting Control
[gcode_macro lights_on]
gcode:
    SET_PIN PIN=caselight VALUE=1.0

[gcode_macro lights_off]
gcode:
    SET_PIN PIN=caselight VALUE=0

[gcode_macro lights_40]
gcode:
    SET_PIN PIN=caselight VALUE=0.4


[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

[gcode_macro MOTORS_XY]
gcode:
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0

[gcode_macro MOTOR_E]
gcode:
    SET_STEPPER_ENABLE STEPPER=stepper_e ENABLE=0

[gcode_macro BELTS_SHAPER]
gcode:
    BELTS_SHAPER_CALIBRATION

[gcode_macro AXES_SHAPER]
gcode:
    AXES_SHAPER_CALIBRATION

[gcode_macro VIBRATIONS]
gcode:
    VIBRATIONS_CALIBRATION 



[gcode_macro M191]
gcode:
    {% set s = params.S|float %}
    {% if s == 0 %}
        # If target temperature is 0, do nothing
        M117 Chamber heating cancelled
    {% else %}
        SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={s}
        # Orca: uncomment the following line if you want to use heat bed to assist chamber heating
        M140 S100
        TEMPERATURE_WAIT SENSOR="heater_generic chamber_heater" MINIMUM={s-1} MAXIMUM={s+1}
        M117 Chamber at target temperature
    {% endif %}

