#############################################
###### DIRECTIONAL VIBRATIONS ANALYSIS ######
#############################################
# Written by Frix_x#0161 #

[gcode_macro DIRECTIONAL_VIBRATIONS_PROFILE]
gcode:
    {% set size = params.SIZE|default(100)|int %} # size of the circle where the angled lines are done
    {% set z_height = params.Z_HEIGHT|default(20)|int %} # z height to put the toolhead before starting the movements

    {% set nb_angles = params.TESTED_ANGLES|default(36)|int %} # number of angles to test over 180deg (default is each 180/36 = 5deg)
    {% set min_speed = params.MIN_SPEED|default(20)|float * 60 %} # minimum feedrate for the movements
    {% set max_speed = params.MAX_SPEED|default(200)|float * 60 %} # maximum feedrate for the movements
    {% set speed_increment = params.SPEED_INCREMENT|default(6)|float * 60 %} # feedrate increment between each move
    {% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %} # travel feedrate between moves
    {% set accel = params.ACCEL|default(3000)|int %} # accel value used to move on the pattern
    {% set accel_chip = params.ACCEL_CHIP|default("adxl345") %} # ADXL chip name in the config

    {% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}
    {% set keep_csv = params.KEEP_CSV|default(True) %}

    {% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}
    {% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}

    {% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}
    {% set old_accel = printer.toolhead.max_accel %}
    {% set old_accel_to_decel = printer.toolhead.max_accel_to_decel %}
    {% set old_sqv = printer.toolhead.square_corner_velocity %}


    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home printer first!") }
    {% endif %}

    {% if params.SPEED_INCREMENT|default(10)|float * 100 != (params.SPEED_INCREMENT|default(10)|float * 100)|int %}
        { action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }
    {% endif %}

    {% if (size / (max_speed / 60)) < 0.25 %}
        { action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }
    {% endif %}

    {action_respond_info("")}
    {action_respond_info("Starting machine directional vibrations profile measurement")}
    {action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button to stop it if needed")}
    {action_respond_info("")}

    SAVE_GCODE_STATE NAME=STATE_DIRECTIONAL_VIBRATIONS_PROFILE

    G90

    # Set the wanted acceleration values (not too high to avoid oscillation, not too low to be able to reach constant speed on each segments)
    SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel} SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}
    
    # Going to the start position
    G1 Z{z_height} F{feedrate_travel / 10}
    G1 X{mid_x } Y{mid_y} F{feedrate_travel}

    {% set pi = (3.141592653589793) | float %}
    {% set tau = (pi * 2) | float %}

    # doing a line pattern at different speeds for each angle
    {% for curr_angle_sample in range(0, nb_angles) %}
        {% set curr_angle = curr_angle_sample * 180/nb_angles %}
        RESPOND MSG="{"Current angle: %.2f degrees" % (curr_angle)|float}"

        {% for curr_sample in range(0, nb_samples) %}
            {% set curr_speed = min_speed + curr_sample * speed_increment %}
            {% set rad_angle = (curr_angle|float * pi / 180) %}

            # Here are some maths to approximate the sin and cos values of rad_angle in Jinja
            # Thanks a lot to ðŸŒ¸ Aubey! ðŸŒ¸ for sharing the idea of using hardcoded Taylor series
            # and the bit of code to do it easily! This is pure madness!
            {% if rad_angle < (-(tau / 4)) %}
                {% set rad_angle = (rad_angle + (tau / 2)) | float %}
                {% set final_mult = (-1) %}
            {% elif rad_angle > (tau / 4) %}
                {% set rad_angle = (rad_angle - (tau / 2)) | float %}
                {% set final_mult = (-1) %}
            {% else %}
                {% set final_mult = (1) %}
            {% endif %}

            {% set sin0 = (rad_angle) %}
            {% set sin1 = ((rad_angle ** 3) / 6) | float %}
            {% set sin2 = ((rad_angle ** 5) / 120) | float %}
            {% set sin3 = ((rad_angle ** 7) / 5040) | float %}
            {% set sin4 = ((rad_angle ** 9) / 362880) | float %}
            {% set sin5 = ((rad_angle ** 11) / 39916800) | float %}
            {% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}
            {% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}
            {% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}

            {% set cos0 = (1) | float %}
            {% set cos1 = ((rad_angle ** 2) / 2) | float %}
            {% set cos2 = ((rad_angle ** 4) / 24) | float %}
            {% set cos3 = ((rad_angle ** 6) / 720) | float %}
            {% set cos4 = ((rad_angle ** 8) / 40320) | float %}
            {% set cos5 = ((rad_angle ** 10) / 3628800) | float %}
            {% set cos6 = ((rad_angle ** 12) / 479001600) | float %}
            {% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}
            {% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}

            # And then back to the part where we use these cos and sin value to compute some angled coordinates
            {% set dx = (size / 2) * cos %}
            {% set dy = (size / 2) * sin %}

            # Move to the start point of the line at the current angle
            G1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}

            ACCELEROMETER_MEASURE CHIP={accel_chip}

            # Two back and forth movements to have enough data in the CSV file
            G1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}
            G1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}
            G1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}
            G1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}
            
            ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace('.','_')}sp{("%.2f" % (curr_speed / 60)|float)|replace('.','_')}
            G4 P300

            M400
        {% endfor %}

    {% endfor %}

    RESPOND MSG="Machine directional vibrations profile generation..."
    RESPOND MSG="This may take some time (3-5min)"
    # RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type dir_vibrations --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"
    M400
    # RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"

    # Restore the previous acceleration values
    SET_VELOCITY_LIMIT ACCEL={old_accel} ACCEL_TO_DECEL={old_accel_to_decel} SQUARE_CORNER_VELOCITY={old_sqv}

    RESTORE_GCODE_STATE NAME=STATE_DIRECTIONAL_VIBRATIONS_PROFILE
